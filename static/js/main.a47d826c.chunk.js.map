{"version":3,"sources":["assets/images/Spinner-preloader.svg","assets/images/404-not-found.jpg","components/common/Preloader/Preloader.jsx","api/api.js","redux/posts-reducer.js","redux/app-reducer.js","components/Posts/Post/Post.styles.js","elements/Button.jsx","components/Posts/Post/Post.jsx","components/Posts/Posts.styles.js","components/utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/Posts/AddPostForm/PostForm.styles.js","components/Posts/AddPostForm/PostForm.jsx","components/Posts/Posts.jsx","components/Posts/PostsContainer.jsx","components/SinglePost/AddCommentForm/CommentForm.jsx","components/SinglePost/SinglePost.styles.js","components/SinglePost/SinglePost.jsx","components/SinglePost/SinglePostContainer.jsx","components/common/NotFound/NotFound.jsx","App.js","redux/redux-store.js","serviceWorker.js","index.js","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","Preloader","PreloaderOverlay","src","preloader","alt","styled","div","instance","Axios","baseURL","postsAPI","get","postId","newPost","post","postData","put","delete","commentData","initialState","postsData","getPosts","dispatch","a","async","response","data","type","posts","getPost","postsReducer","state","action","initialized","appReducer","PostWrap","li","PostTitle","h5","PostBody","p","PostControls","button","Post","title","body","onDeletePost","to","onClick","Container","PostsList","ul","maxLength","value","length","textareaField","input","placeholder","meta","touched","error","warning","className","s","formControl","errorMessage","warningMessage","inputField","label","Form","form","FormTitle","span","maxLength300","reduxForm","props","handleSubmit","pristine","submitting","onSubmit","Field","name","component","validate","Button","disabled","Posts","addPost","values","map","item","key","id","compose","connect","postsPage","formData","status","reset","deletePost","withRouter","useEffect","BackLink","Title","TitleInput","Body","BodyTextarea","textarea","SinglePost","editPost","addComment","useState","setTitle","titleEditMode","setTitleEditMode","setBody","bodyEditMode","setBodyEditMode","toggleTitleEditMode","toggleBodyEditMode","onChange","e","target","onBlur","autoFocus","rows","comments","match","params","NotFound","NotFound404","App","this","initializeApp","exact","path","render","Component","app","then","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a47d826c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner-preloader.f6076e2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/404-not-found.5682ea5f.jpg\";","import React from 'react'\r\nimport preloader from '../../../assets/images/Spinner-preloader.svg'\r\nimport styled from 'styled-components'\r\n\r\nconst Preloader = () => {\r\n    return(\r\n        <PreloaderOverlay>\r\n            <img src={preloader} alt='preloader'/>\r\n        </PreloaderOverlay>\r\n    )\r\n}\r\nexport default Preloader\r\n\r\nconst PreloaderOverlay = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n`","import * as Axios from \"axios\"\n\nconst instance = Axios.create({\n    baseURL: 'https://bloggy-api.herokuapp.com/'\n})\n\n\nexport const postsAPI = {\n    getPosts() {\n        return instance.get('posts')\n    },\n    getPost(postId) {\n        return instance.get(`posts/${postId}/?_embed=comments`)\n    },\n    addPost(newPost) {\n        return instance.post('posts', newPost)\n    },\n    updatePost(postId, postData) {\n        return instance.put(`posts/${postId}`, postData)\n    },\n    deletePost(postId) {\n        return instance.delete(`posts/${postId}`)\n    },\n    addComment(commentData) {\n        return instance.post('comments', commentData)\n    },\n}","import { postsAPI } from \"../api/api\"\nimport { reset } from 'redux-form'\n\nconst SET_POSTS = 'posts/SET_POSTS'\nconst SET_POST = 'posts/SET_POST'\n\nlet initialState = {\n   postsData: [],\n   postData: {}\n}\n\nconst postsReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case SET_POSTS:\n         return {\n            ...state,\n            postsData: action.posts\n         }\n      case SET_POST:\n         return {\n            ...state,\n            postData: action.post\n         }\n      default:\n         return state\n   }\n}\n\nexport const setPosts = (posts) => ({\n   type: SET_POSTS,\n   posts\n})\nexport const setPost = (post) => ({\n   type: SET_POST,\n   post\n})\n\nexport const getPosts = () => async (dispatch) => {\n   let response = await postsAPI.getPosts()\n   if (response.data) {\n      dispatch(setPosts(response.data))\n   }\n}\nexport const getPost = (postId) => async (dispatch) => {\n   let response = await postsAPI.getPost(postId)\n   if (response.data) {\n      dispatch(setPost(response.data))\n   }\n}\nexport const addPost = (formData) => async (dispatch) => {\n   let response = await postsAPI.addPost(formData)\n   if (response.status === 201) {\n      dispatch(getPosts())\n      dispatch(reset('addPostForm'))\n   }\n}\nexport const deletePost = (postId) => async (dispatch) => {\n   let response = await postsAPI.deletePost(postId)\n   if (response.status === 200) {\n      dispatch(getPosts())\n   }\n}\nexport const editPost = (postId, formData) => async (dispatch) => {\n   let response = await postsAPI.updatePost(postId, formData)\n   if (response.status === 200) {\n      dispatch(getPost(postId))\n   }\n}\nexport const addComment = (postId, formData) => async (dispatch) => {\n   let commentData = {postId: +postId, body: formData.body}\n   let response = await postsAPI.addComment(commentData)\n   if (response.status === 201) {\n      dispatch(getPost(postId))\n      dispatch(reset('addCommentForm'))\n   }\n}\n\nexport default postsReducer","import { getPosts } from \"./posts-reducer\"\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS'\n\n\nlet initialState = {\n   initialized: false\n}\n\nconst appReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case INITIALIZED_SUCCESS:\n         return {\n            ...state,\n            initialized: true\n         }\n         default:\n            return state\n   }\n}\n\nexport const initializedSuccess = () => ({\n   type: INITIALIZED_SUCCESS\n})\n\n\nexport const initializeApp = () => (dispatch) => {\n   let promise = dispatch(getPosts())\n   promise.then(() =>{\n         dispatch(initializedSuccess())\n      })\n}\n\nexport default appReducer","import styled from 'styled-components'\r\n\r\nexport const PostWrap = styled.li`\r\n   border: 1px dashed #363636;\r\n   padding: 5px;\r\n`\r\nexport const PostTitle = styled.h5`\r\n   margin: 0 0 10px 0;\r\n`\r\nexport const PostBody = styled.p`\r\n   margin: 0;\r\n`\r\nexport const PostControls = styled.div`\r\n   display: flex;\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.button`\r\n    color: #fff;\r\n    background-color: #6ea6ce;\r\n    font-size: 14px;\r\n    padding: 4px 13px;\r\n    border: none;\r\n    cursor: pointer;\r\n    outline: none;\r\n    transition: 0.2s;\r\n    &:hover {\r\n        background-color: #256fa5;\r\n    }\r\n    &:active {\r\n        transform: translateY(1px) \r\n    }\r\n`","import React from 'react'\nimport {PostWrap, PostTitle, PostBody, PostControls} from './Post.styles'\nimport { NavLink } from 'react-router-dom'\nimport Buttom from './../../../elements/Button'\n\n\nconst Post = ({postId, title, body, onDeletePost}) => {\n   \n   return (\n      <PostWrap>\n         <PostTitle>{title}</PostTitle>\n         <PostBody>{body}</PostBody>\n         <PostControls>\n            <NavLink to={`/post/${postId}`}>open post</NavLink>\n            <Buttom onClick={() => onDeletePost(postId)}>delete post</Buttom>\n         </PostControls>\n      </PostWrap>\n   )\n}\n\nexport default Post","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n   border: 1px solid #ccc;\r\n   padding: 10px;\r\n`\r\nexport const PostsList = styled.ul`\r\n   display: grid;\r\n   grid-gap: 5px;\r\n   list-style: none;\r\n   margin: 0;\r\n   padding: 0;\r\n`","export const required = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'field is required'\r\n}\r\nexport const maxLength = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n\r\n// export const email = value =>\r\n//     value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n//         ? 'Invalid email address'\r\n//         : undefined","import React from 'react'\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const textareaField = ({\r\n    input,\r\n    placeholder,\r\n    meta: { touched, error, warning }\r\n}) => (\r\n        <div className={s.formControl}>\r\n            <textarea {...input} placeholder={placeholder} />\r\n            {touched &&\r\n                ((error && <span className={s.errorMessage}>{error}</span>) ||\r\n                    (warning && <span className={s.warningMessage}>{warning}</span>))\r\n            }\r\n        </div>\r\n    )\r\n\r\nexport const inputField = ({\r\n    input,\r\n    label,\r\n    type,\r\n    placeholder,\r\n    meta: { touched, error, warning }\r\n}) => (\r\n        <div className={s.formControl}>\r\n            <label>{label}\r\n                <input {...input} type={type} placeholder={placeholder} />\r\n            </label>\r\n            {touched &&\r\n                ((error && <span className={s.errorMessage}>{error}</span>) ||\r\n                    (warning && <span className={s.warningMessage}>{warning}</span>))\r\n            }\r\n        </div>\r\n    )","import styled from 'styled-components'\r\n\r\nexport const Form = styled.form`\r\n    display: grid;\r\n\r\n    border: 1px solid #ccc;\r\n    margin-bottom: 10px;\r\n`\r\nexport const FormTitle = styled.span`\r\n   \r\n`\r\nexport const PostsList = styled.ul`\r\n   display: grid;\r\n   grid-gap: 5px;\r\n   list-style: none;\r\n   margin: 0;\r\n   padding: 0;\r\n`","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { maxLength } from '../../utils/validators/validators'\r\nimport { textareaField, inputField } from '../../common/FormsControls/FormsControls'\r\nimport {Form, FormTitle} from './PostForm.styles'\r\nimport Button from '../../../elements/Button'\r\n\r\n\r\nconst maxLength300 = maxLength(300)\r\nconst AddPostForm = (props) => {\r\n    const { handleSubmit, pristine, submitting } = props\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <FormTitle>Add new post:</FormTitle>\r\n            <Field\r\n                name={'title'}\r\n                placeholder={'Post title'}\r\n                component={inputField}\r\n                validate={maxLength300}\r\n            />\r\n            <Field\r\n                name={'body'}\r\n                placeholder={'Post message'}\r\n                component={textareaField}\r\n                validate={maxLength300}\r\n            />\r\n            <Button type=\"submit\" disabled={pristine || submitting}>Add post</Button>\r\n        </Form>\r\n    )\r\n}\r\nexport default reduxForm({\r\n    form: 'addPostForm'\r\n})(AddPostForm)","import React from 'react'\nimport Post from './Post/Post'\nimport {Container, PostsList} from './Posts.styles'\nimport AddPostReduxForm from './AddPostForm/PostForm'\n\n\nconst Posts = ({posts, addPost, onDeletePost}) => {\n   \n   let onAddNewPost = (values) => {\n      addPost(values)\n   }\n\n   return (\n      <Container>\n         <AddPostReduxForm onSubmit={onAddNewPost} />\n         <PostsList>\n            {posts.map(item =>\n               <Post key={item.id}\n               postId={item.id}\n               title={item.title}\n               body={item.body}\n               onDeletePost={onDeletePost}/>)\n            }\n         </PostsList>\n      </Container>\n   )\n}\n\nexport default Posts","import React, {useEffect} from 'react'\nimport { getPosts, addPost, deletePost } from '../../redux/posts-reducer'\nimport Posts from './Posts'\nimport { connect } from 'react-redux'\n\nimport { compose } from 'redux'\nimport { withRouter } from 'react-router-dom'\n\nconst PostsContainer = (props) => {\n   useEffect(() => {\n      props.getPosts()\n   }, [])\n\n   let onDeletePost = (postId) => {\n      props.deletePost(postId)\n   }\n   return (\n      <Posts {...props} addPost={props.addPost} onDeletePost={onDeletePost} />\n   )\n}\n\nlet mapStateToProps = (state) => ({\n   posts: state.postsPage.postsData,\n})\nexport default compose(\n   connect(mapStateToProps, {\n      getPosts,\n      addPost,\n      deletePost\n   }),\n   withRouter,\n)(PostsContainer)","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { maxLength } from '../../utils/validators/validators'\r\nimport { textareaField } from '../../common/FormsControls/FormsControls'\r\nimport Button from '../../../elements/Button'\r\n\r\n\r\nconst maxLength300 = maxLength(300)\r\nconst AddCommentForm = (props) => {\r\n    const { handleSubmit, pristine, submitting } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <span>Add new comment:</span>\r\n            <Field\r\n                name={'body'}\r\n                placeholder={'Post message'}\r\n                component={textareaField}\r\n                validate={maxLength300}\r\n            />\r\n            <Button type=\"submit\" disabled={pristine || submitting}>Add post</Button>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm({\r\n    form: 'addCommentForm'\r\n})(AddCommentForm)","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n   display: flex;\r\n   flex-flow: column wrap;\r\n   border: 1px solid #ccc;\r\n   padding: 10px;\r\n`\r\nexport const BackLink = styled.div`\r\n   a {\r\n      display: inline-block;\r\n      text-decoration: none;\r\n      padding: 3px 5px;\r\n      color: #fff;\r\n      background-color: #ccc;\r\n   }\r\n`\r\nexport const Title = styled.h5`\r\n   margin: 5px 0;\r\n   cursor: pointer;\r\n   &:hover {\r\n      background-color: #ccc;\r\n   }\r\n`\r\nexport const TitleInput = styled.input`\r\n   margin: 5px 0;\r\n   padding: 5px;\r\n`\r\nexport const Body = styled.p`\r\n   margin: 0;\r\n   cursor: pointer;\r\n   &:hover {\r\n      background-color: #ccc;\r\n   }\r\n`\r\nexport const BodyTextarea = styled.textarea`\r\n   resize: none;\r\n   padding: 5px;\r\n`\r\nexport const PostsList = styled.ul`\r\n   display: grid;\r\n   grid-gap: 5px;\r\n   list-style: none;\r\n   margin: 0;\r\n   padding: 0;\r\n`","import React, { useState, useEffect } from 'react'\nimport AddCommentReduxForm from './AddCommentForm/CommentForm'\nimport { NavLink } from 'react-router-dom'\nimport {Container, BackLink, Title, TitleInput, Body, BodyTextarea } from './SinglePost.styles'\n\n\n\n\nconst SinglePost = ({ postId, post, editPost, addComment }) => {\n\n   let [title, setTitle] = useState(post.title)\n   let [titleEditMode, setTitleEditMode] = useState(false)\n\n   let [body, setBody] = useState(post.body)\n   let [bodyEditMode, setBodyEditMode] = useState(false)\n   useEffect(() => {\n      setTitle(post.title)\n      setBody(post.body)\n   }, [post])\n\n   const toggleTitleEditMode = () => {\n      if (!titleEditMode) {\n         setTitleEditMode(true)\n      } else {\n         setTitleEditMode(false)\n         editPost(postId, { title, body })\n      }\n   }\n   const toggleBodyEditMode = () => {\n      if (!bodyEditMode) {\n         setBodyEditMode(true)\n      } else {\n         setBodyEditMode(false)\n         editPost(postId, { title, body })\n      }\n   }\n\n   let onAddNewComment = (values) => {\n      addComment(postId, values)\n   }\n\n   return (\n      <Container>\n         <BackLink>\n            <NavLink to='/posts'>back to posts</NavLink>\n         </BackLink>\n         {!titleEditMode &&\n            <Title onClick={toggleTitleEditMode}>{post.title}</Title>\n         }\n         {titleEditMode &&\n            <TitleInput onChange={e => setTitle(e.target.value)} onBlur={toggleTitleEditMode} autoFocus={true} value={title}></TitleInput>\n         }\n         {!bodyEditMode &&\n            <Body onClick={toggleBodyEditMode}>{post.body}</Body>\n         }\n         {bodyEditMode &&\n            <BodyTextarea rows='7' onChange={e => setBody(e.target.value)} onBlur={toggleBodyEditMode} autoFocus={true} value={body}></BodyTextarea>\n         }\n         <span>comments:</span>\n         <ul>\n            {post.comments && post.comments.map(item =>\n               <li key={item.id}>{item.body}</li>)\n            }\n         </ul>\n         <AddCommentReduxForm onSubmit={onAddNewComment} />\n      </Container>\n   )\n}\n\nexport default SinglePost","import React, {useEffect} from 'react'\nimport { getPost, editPost, addComment } from '../../redux/posts-reducer'\nimport SinglePost from './SinglePost'\nimport { connect } from 'react-redux'\n\nimport { compose } from 'redux'\nimport { withRouter } from 'react-router-dom'\n\nconst SinglePostContainer = (props) => {\n   let postId = props.match.params.postId\n   useEffect(() => {\n      props.getPost(postId)\n   }, [])\n   return (\n      <SinglePost {...props} \n         postId={postId} \n         editPost={props.editPost}\n         addComment={props.addComment}/>\n   )\n}\n\nlet mapStateToProps = (state) => ({\n   post: state.postsPage.postData,\n})\nexport default compose(\n   connect(mapStateToProps, {\n      getPost,\n      editPost,\n      addComment\n   }),\n   withRouter,\n)(SinglePostContainer)","import React from 'react'\r\nimport NotFound404 from './../../../assets/images/404-not-found.jpg'\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <img src={NotFound404} alt='NotFound'/>\r\n    )\r\n}\r\nexport default NotFound\r\n","import React, { Component } from 'react'\nimport { Route, Redirect, Switch } from \"react-router-dom\"\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { withRouter } from 'react-router-dom'\n\nimport './App.css'\n\nimport Preloader from './components/common/Preloader/Preloader'\nimport { initializeApp } from './redux/app-reducer'\nimport PostsContainer from './components/Posts/PostsContainer'\nimport SinglePostContainer from './components/SinglePost/SinglePostContainer'\nimport NotFound from './components/common/NotFound/NotFound'\n\n\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n  render() {\n    if (!this.props.initialized) {\n      return (\n              <Preloader />\n      )\n    }\n    return (\n      <div className='app-wrapper'>\n        <Switch>\n          <Route exact path=\"/\"\n                  render={() => <Redirect to='/posts' />} />\n          <Route exact path=\"/posts\"\n                  render={() => <PostsContainer />} />\n          <Route exact path=\"/post/:postId?\"\n                  render={() => <SinglePostContainer /> } />\n          <Route path='/404'\n                  render={() => <NotFound />} />\n          <Route path='*'\n                  render={() => <Redirect to='/404' />} />\n        </Switch>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => ({\n  initialized: state.app.initialized\n})\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, {\n          initializeApp\n  })\n)(App)\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport appReducer from \"./app-reducer\"\n\nimport thunkMiddleware from 'redux-thunk'\nimport postsReducer from \"./posts-reducer\"\nimport { reducer as formReducer } from 'redux-form'\n\nlet reducers = combineReducers({\n   app: appReducer,\n\n   postsPage: postsReducer,\n\n\n   \n   form: formReducer\n})\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware)) // applyMiddleware - for dispatching thunk function \n\nwindow.__store__ = store\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './redux/redux-store'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n   <HashRouter>\n      <Provider store={store}>\n         <App />\n      </Provider>\n   </HashRouter>, document.getElementById('root'))\n\nserviceWorker.unregister()","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3Qncq\",\"errorMessage\":\"FormsControls_errorMessage__1F7ye\",\"warningMessage\":\"FormsControls_warningMessage__388yM\"};"],"sourceRoot":""}